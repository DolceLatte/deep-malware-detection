import os
import random

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
import torch
from sklearn.metrics import confusion_matrix
from tqdm import tqdm


def set_seed(seed):
    random.seed(seed)
    os.environ["PYTHONHASHSEED"] = str(seed)
    np.random.seed(seed)
    torch.manual_seed(seed)
    if torch.cuda.is_available():
        torch.backends.cudnn.deterministic = True
        torch.backends.cudnn.benchmark = True


def count_parameters(model, trainable_only=True):
    if trainable_only:
        return sum(p.numel() for p in model.parameters() if p.requires_grad)
    return sum(p.numel() for p in model.parameters())


def set_plt_style():
    plt.rcParams.update(
        {"text.usetex": True, "font.family": "serif", "font.serif": ["cm"],}
    )


@torch.no_grad()
def plot_confusion_matrix(model, test_loader, save_title, device):
    y_true = y_pred = []
    model.eval()
    for (inputs, labels) in tqdm(test_loader):
        intputs = inputs.to(device)
        outputs = model(inputs)
        outputs = outputs > 0.5
        y_true.append(labels)
        y_pred.append(outputs)
    model.train()
    y_true = torch.cat(y_true).to(int).to(device).numpy()
    y_pred = torch.cat(y_pred).to(int).to(device).numpy()
    assert y_true.shape == y_pred.shape
    conf_mat = confusion_matrix(y_true, y_pred, normalize="all")
    axis_labels = ("Benign", "Malware")
    df = pd.DataFrame(conf_mat, index=axis_labels, columns=axis_labels)
    plot = sns.heatmap(df, annot=True, cmap="Blues")
    plot.figure.savefig(os.path.join("figs", f"{save_title}.png"), dpi=300)

