import torch
import torch.nn.functional as F
from torch import nn


class MalConvBase(nn.Module):
    def __init__(
        self, embed_dim, max_len, out_channels, window_size, dropout,
    ):
        super(MalConvBase, self).__init__()
        self.embed = nn.Embedding(257, embed_dim)
        self.dropout = nn.Dropout(dropout)
        self.conv = nn.Conv1d(
            in_channels=embed_dim,
            out_channels=out_channels * 2,
            kernel_size=window_size,
            stride=window_size,
        )
        self.fc = nn.Linear(out_channels, 1)

    def forward(self, x):
        batch_size, seq_len = x.size(0), x.size(1)
        embedding = self.dropout(self.embed(x))
        conv_in = embedding.permute(0, 2, 1)
        conv_out = self.conv(conv_in)
        glu_out = F.glu(conv_out, dim=1)
        values, indices = glu_out.max(dim=-1)
        output = self.fc(values).squeeze(1)
        return output


class MalConvPlus(nn.Module):
    def __init__(
        self, embed_dim, max_len, out_channels, window_size, dropout, device,
    ):
        super(MalConvPlus, self).__init__()
        self.device = device
        self.tok_embed = nn.Embedding(257, embed_dim)
        self.pos_embed = nn.Embedding(max_len, embed_dim)
        self.dropout = nn.Dropout(dropout)
        self.conv = nn.Conv1d(
            in_channels=embed_dim,
            out_channels=out_channels * 2,
            kernel_size=window_size,
            stride=window_size,
        )
        self.fc = nn.Linear(out_channels, 1)

    def forward(self, x):
        batch_size, seq_len = x.size(0), x.size(1)
        tok_embedding = self.tok_embed(x)
        pos = torch.arange(seq_len).unsqueeze(0).repeat(batch_size, 1).to(self.device)
        pos_embedding = self.pos_embed(pos)
        embedding = self.dropout(tok_embedding + pos_embedding)
        conv_in = embedding.permute(0, 2, 1)
        conv_out = self.conv(conv_in)
        glu_out = F.glu(conv_out, dim=1)
        values, indices = glu_out.max(dim=-1)
        output = self.fc(values).squeeze(1)
        return output


class RCNN(nn.Module):
    def __init__(
        self, embed_dim, out_channels, hidden_size, num_layers, dropout,
    ):
        super(RCNN, self).__init__()
        self.embed = nn.Embedding(257, embed_dim)
        self.conv = nn.Conv1d(
            in_channels=embed_dim,
            out_channels=out_channels,
            kernel_size=window_size,
            stride=window_size,
        )
        self.rnn = nn.LSTM(
            input_size=out_channels,
            hidden_size=hidden_size,
            num_layers=num_layers,
            dropout=dropout,
        )
        self.dropout = nn.Dropout(dropout)
        self.bn = nn.BatchNorm1d()
        self.fc = nn.Linear(hidden_size, 1)

    def forward(self, x):
        embedding = self.dropout(self.embed(x))
        conv_in = embedding.permute(0, 2, 1)
        conv_out = self.conv(conv_in)
        lstm_out, (hidden, cell) = self.lstm(conv_out)
        fc_in = self.bn(hidden)
        output = self.fc(fc_in).squeeze(1)
        return output


class ResRCNN(nn.Module):
    def __init__(
        self, embed_dim, out_channels, hidden_size, num_layers, dropout,
    ):
        super(RCNN, self).__init__()
        self.embed = nn.Embedding(257, embed_dim)
        self.conv = nn.Conv1d(
            in_channels=embed_dim,
            out_channels=out_channels,
            kernel_size=window_size,
            stride=window_size,
        )
        self.rnn = nn.LSTM(
            input_size=out_channels,
            hidden_size=hidden_size,
            num_layers=num_layers,
            dropout=dropout,
        )
        self.dropout = nn.Dropout(dropout)
        self.bn = nn.BatchNorm1d()
        self.fc = nn.Linear(out_channels + hidden_size, 1)

    def forward(self, x):
        embedding = self.dropout(self.embed(x))
        conv_in = embedding.permute(0, 2, 1)
        conv_out = self.conv(conv_in)
        lstm_out, (hidden, cell) = self.lstm(conv_out)
        values, indices = conv_out.max(dim=-1)
        fc_in = self.bn(torch.cat((hidden, values), dim=-1))
        output = self.fc(fc_in).squeeze(1)
        return output


# https://towardsdatascience.com/bert-text-classification-using-pytorch-723dfb8b6b5b
# https://machinelearningmastery.com/cnn-long-short-term-memory-networks/
# https://github.com/bamtercelboo/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch/blob/master/models/model_CLSTM.py
